# This is a basic workflow to help you get started with Actions

name: CI

# on: [ push ]

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  checks: write
  contents: read
  issues: read
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # node-version: [14.x, 16.x, 17.x]
        node-version: [17.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: JEST Tests            # Name of the check run which will be created
          path: junit.xml    # Path to test results
          reporter: jest-junit        # Format of test results

      - name: Code Coverage Report
        uses: ArtiomTr/jest-coverage-report-action@v2

      # - name: Comment Test Coverage
      #   uses: AthleticNet/comment-test-coverage@1.1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     path: coverage/coverage-summary.json
      #     title: Test Coverage

      # KEEP covertura code coverage report
      # generates a report and comments in the PR
      - name: Comment Test Coverage
        uses: 5monkeys/cobertura-action@master
        with:
          path: coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 30
          skip_covered: false
          show_line: true
          show_branch: true
          show_missing: true
          link_missing_lines: true
          only_changed_files: false

      # - name: ReportGenerator
      #   uses: danielpalme/ReportGenerator-GitHub-Action@5.1.4
      #   with:
      #     reports: 'cobertura-coverage.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
      #     targetdir: 'coverage' # REQUIRED # The directory where the generated report should be saved.
      #     reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary
      #     sourcedirs: '' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
      #     historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
      #     plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
      #     assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
      #     classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
      #     filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
      #     verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
      #     title: '' # Optional title.
      #     tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
      #     license: '' # Optional license for PRO version. Get your license here: https://danielpalme.github.io/ReportGenerator/pro
      #     customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
      #     toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.
     
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/cobertura-coverage.xml # optional


      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results (NodeJS ${{ matrix.node-version }})
          path: junit.xml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: junit.xml

      - name: Publish Test Report
        uses: romeovs/lcov-reporter-action@v0.2.16
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
    
  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
          
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: "artifacts/**/*.xml"

      
          
  